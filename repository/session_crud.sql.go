// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: session_crud.sql

package repository

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createSession = `-- name: CreateSession :exec
INSERT INTO session (
    "id","user_id", "refresh_token", "user_agent", "client_ip", "expires_at"
) VALUES (
    $1, $2, $3, $4, $5, $6
)
`

type CreateSessionParams struct {
	ID           uuid.UUID
	UserID       int64
	RefreshToken string
	UserAgent    string
	ClientIp     string
	ExpiresAt    time.Time
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) error {
	_, err := q.db.ExecContext(ctx, createSession,
		arg.ID,
		arg.UserID,
		arg.RefreshToken,
		arg.UserAgent,
		arg.ClientIp,
		arg.ExpiresAt,
	)
	return err
}

const getSession = `-- name: GetSession :one
SELECT id, user_id, refresh_token, user_agent, client_ip, expires_at, created_at FROM session
WHERE refresh_token = $1 LIMIT 1
`

func (q *Queries) GetSession(ctx context.Context, refreshToken string) (Session, error) {
	row := q.db.QueryRowContext(ctx, getSession, refreshToken)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.RefreshToken,
		&i.UserAgent,
		&i.ClientIp,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}
